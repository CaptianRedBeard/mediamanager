// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: albums.sql

package metadata

import (
	"context"
	"database/sql"
)

const addImageToAlbum = `-- name: AddImageToAlbum :exec

INSERT INTO image_album (image_id, album_id)
VALUES (?, ?)
`

type AddImageToAlbumParams struct {
	ImageID string
	AlbumID string
}

// IMAGE_ALBUM --
func (q *Queries) AddImageToAlbum(ctx context.Context, arg AddImageToAlbumParams) error {
	_, err := q.db.ExecContext(ctx, addImageToAlbum, arg.ImageID, arg.AlbumID)
	return err
}

const createAlbum = `-- name: CreateAlbum :exec

INSERT INTO albums (id, name, description, private)
VALUES (?, ?, ?, ?)
`

type CreateAlbumParams struct {
	ID          string
	Name        string
	Description sql.NullString
	Private     sql.NullInt64
}

// ALBUMS --
func (q *Queries) CreateAlbum(ctx context.Context, arg CreateAlbumParams) error {
	_, err := q.db.ExecContext(ctx, createAlbum,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Private,
	)
	return err
}

const deleteAlbum = `-- name: DeleteAlbum :exec
DELETE FROM albums
WHERE id = ?
`

func (q *Queries) DeleteAlbum(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteAlbum, id)
	return err
}

const getAlbum = `-- name: GetAlbum :one
SELECT id, name, description, private, created_at, edited_at
FROM albums
WHERE id = ?
`

func (q *Queries) GetAlbum(ctx context.Context, id string) (Album, error) {
	row := q.db.QueryRowContext(ctx, getAlbum, id)
	var i Album
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Private,
		&i.CreatedAt,
		&i.EditedAt,
	)
	return i, err
}

const listAlbums = `-- name: ListAlbums :many
SELECT id, name, description, private, created_at, edited_at
FROM albums
ORDER BY created_at DESC
`

func (q *Queries) ListAlbums(ctx context.Context) ([]Album, error) {
	rows, err := q.db.QueryContext(ctx, listAlbums)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Album
	for rows.Next() {
		var i Album
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Private,
			&i.CreatedAt,
			&i.EditedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAlbumsForImage = `-- name: ListAlbumsForImage :many
SELECT
    a.id,
    a.name,
    a.description,
    a.private,
    a.created_at,
    a.edited_at
FROM albums a
JOIN image_album ia ON a.id = ia.album_id
WHERE ia.image_id = ?
ORDER BY ia.created_at DESC
`

func (q *Queries) ListAlbumsForImage(ctx context.Context, imageID string) ([]Album, error) {
	rows, err := q.db.QueryContext(ctx, listAlbumsForImage, imageID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Album
	for rows.Next() {
		var i Album
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Private,
			&i.CreatedAt,
			&i.EditedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listImagesInAlbum = `-- name: ListImagesInAlbum :many
SELECT
    i.id,
    i.filename,
    i.mime_type_id,
    i.thumbnail,
    i.hash,
    i.created_at,
    i.edited_at
FROM images i
JOIN image_album ia ON i.id = ia.image_id
WHERE ia.album_id = ?
ORDER BY ia.created_at DESC
`

func (q *Queries) ListImagesInAlbum(ctx context.Context, albumID string) ([]Image, error) {
	rows, err := q.db.QueryContext(ctx, listImagesInAlbum, albumID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Image
	for rows.Next() {
		var i Image
		if err := rows.Scan(
			&i.ID,
			&i.Filename,
			&i.MimeTypeID,
			&i.Thumbnail,
			&i.Hash,
			&i.CreatedAt,
			&i.EditedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPublicAlbums = `-- name: ListPublicAlbums :many
SELECT id, name, description, private, created_at, edited_at
FROM albums
WHERE private = 0
ORDER BY created_at DESC
`

// Optional: List only public albums (private = 0)
func (q *Queries) ListPublicAlbums(ctx context.Context) ([]Album, error) {
	rows, err := q.db.QueryContext(ctx, listPublicAlbums)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Album
	for rows.Next() {
		var i Album
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Private,
			&i.CreatedAt,
			&i.EditedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeImageFromAlbum = `-- name: RemoveImageFromAlbum :exec
DELETE FROM image_album
WHERE image_id = ? AND album_id = ?
`

type RemoveImageFromAlbumParams struct {
	ImageID string
	AlbumID string
}

func (q *Queries) RemoveImageFromAlbum(ctx context.Context, arg RemoveImageFromAlbumParams) error {
	_, err := q.db.ExecContext(ctx, removeImageFromAlbum, arg.ImageID, arg.AlbumID)
	return err
}

const updateAlbum = `-- name: UpdateAlbum :exec
UPDATE albums
SET name = ?, description = ?, private = ?, edited_at = CURRENT_TIMESTAMP
WHERE id = ?
`

type UpdateAlbumParams struct {
	Name        string
	Description sql.NullString
	Private     sql.NullInt64
	ID          string
}

func (q *Queries) UpdateAlbum(ctx context.Context, arg UpdateAlbumParams) error {
	_, err := q.db.ExecContext(ctx, updateAlbum,
		arg.Name,
		arg.Description,
		arg.Private,
		arg.ID,
	)
	return err
}

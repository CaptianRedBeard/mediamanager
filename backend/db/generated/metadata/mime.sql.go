// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: mime.sql

package metadata

import (
	"context"
	"database/sql"
)

const createMimeType = `-- name: CreateMimeType :execresult
INSERT INTO mime_types (mime)
VALUES (?)
`

func (q *Queries) CreateMimeType(ctx context.Context, mime string) (sql.Result, error) {
	return q.db.ExecContext(ctx, createMimeType, mime)
}

const getMimeTypeByID = `-- name: GetMimeTypeByID :one
SELECT id, mime
FROM mime_types
WHERE id = ?
`

func (q *Queries) GetMimeTypeByID(ctx context.Context, id int64) (MimeType, error) {
	row := q.db.QueryRowContext(ctx, getMimeTypeByID, id)
	var i MimeType
	err := row.Scan(&i.ID, &i.Mime)
	return i, err
}

const getMimeTypeByValue = `-- name: GetMimeTypeByValue :one
SELECT id, mime
FROM mime_types
WHERE mime = ?
`

func (q *Queries) GetMimeTypeByValue(ctx context.Context, mime string) (MimeType, error) {
	row := q.db.QueryRowContext(ctx, getMimeTypeByValue, mime)
	var i MimeType
	err := row.Scan(&i.ID, &i.Mime)
	return i, err
}

const listMimeTypes = `-- name: ListMimeTypes :many
SELECT id, mime
FROM mime_types
ORDER BY mime
`

func (q *Queries) ListMimeTypes(ctx context.Context) ([]MimeType, error) {
	rows, err := q.db.QueryContext(ctx, listMimeTypes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MimeType
	for rows.Next() {
		var i MimeType
		if err := rows.Scan(&i.ID, &i.Mime); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

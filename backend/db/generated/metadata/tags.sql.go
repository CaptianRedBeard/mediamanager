// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: tags.sql

package metadata

import (
	"context"
	"database/sql"
)

const addImageToTag = `-- name: AddImageToTag :exec
INSERT INTO image_tag (image_id, tag_id)
VALUES (?, ?)
ON CONFLICT(image_id, tag_id) DO NOTHING
`

type AddImageToTagParams struct {
	ImageID string
	TagID   string
}

func (q *Queries) AddImageToTag(ctx context.Context, arg AddImageToTagParams) error {
	_, err := q.db.ExecContext(ctx, addImageToTag, arg.ImageID, arg.TagID)
	return err
}

const createTag = `-- name: CreateTag :exec
INSERT INTO tags (id, name, private)
VALUES (?, ?, ?)
`

type CreateTagParams struct {
	ID      string
	Name    string
	Private sql.NullInt64
}

func (q *Queries) CreateTag(ctx context.Context, arg CreateTagParams) error {
	_, err := q.db.ExecContext(ctx, createTag, arg.ID, arg.Name, arg.Private)
	return err
}

const deleteTag = `-- name: DeleteTag :exec
DELETE FROM tags
WHERE id = ?
`

func (q *Queries) DeleteTag(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteTag, id)
	return err
}

const getTag = `-- name: GetTag :one
SELECT id, name, private, created_at, edited_at FROM tags
WHERE id = ?
`

func (q *Queries) GetTag(ctx context.Context, id string) (Tag, error) {
	row := q.db.QueryRowContext(ctx, getTag, id)
	var i Tag
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Private,
		&i.CreatedAt,
		&i.EditedAt,
	)
	return i, err
}

const listImagesForTag = `-- name: ListImagesForTag :many
SELECT images.id, images.filename, images.mime_type_id, images.thumbnail, images.hash, images.created_at, images.edited_at
FROM images
JOIN image_tag ON images.id = image_tag.image_id
WHERE image_tag.tag_id = ?
ORDER BY images.created_at DESC
`

func (q *Queries) ListImagesForTag(ctx context.Context, tagID string) ([]Image, error) {
	rows, err := q.db.QueryContext(ctx, listImagesForTag, tagID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Image
	for rows.Next() {
		var i Image
		if err := rows.Scan(
			&i.ID,
			&i.Filename,
			&i.MimeTypeID,
			&i.Thumbnail,
			&i.Hash,
			&i.CreatedAt,
			&i.EditedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTags = `-- name: ListTags :many
SELECT id, name, private, created_at, edited_at FROM tags
ORDER BY created_at DESC
`

func (q *Queries) ListTags(ctx context.Context) ([]Tag, error) {
	rows, err := q.db.QueryContext(ctx, listTags)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tag
	for rows.Next() {
		var i Tag
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Private,
			&i.CreatedAt,
			&i.EditedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTagsForImage = `-- name: ListTagsForImage :many
SELECT tags.id, tags.name, tags.private, tags.created_at, tags.edited_at
FROM tags
JOIN image_tag ON tags.id = image_tag.tag_id
WHERE image_tag.image_id = ?
ORDER BY tags.created_at DESC
`

func (q *Queries) ListTagsForImage(ctx context.Context, imageID string) ([]Tag, error) {
	rows, err := q.db.QueryContext(ctx, listTagsForImage, imageID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tag
	for rows.Next() {
		var i Tag
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Private,
			&i.CreatedAt,
			&i.EditedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeImageFromTag = `-- name: RemoveImageFromTag :exec
DELETE FROM image_tag
WHERE image_id = ? AND tag_id = ?
`

type RemoveImageFromTagParams struct {
	ImageID string
	TagID   string
}

func (q *Queries) RemoveImageFromTag(ctx context.Context, arg RemoveImageFromTagParams) error {
	_, err := q.db.ExecContext(ctx, removeImageFromTag, arg.ImageID, arg.TagID)
	return err
}

const updateTag = `-- name: UpdateTag :exec
UPDATE tags
SET name = ?,
    private = ?,
    edited_at = CURRENT_TIMESTAMP
WHERE id = ?
`

type UpdateTagParams struct {
	Name    string
	Private sql.NullInt64
	ID      string
}

func (q *Queries) UpdateTag(ctx context.Context, arg UpdateTagParams) error {
	_, err := q.db.ExecContext(ctx, updateTag, arg.Name, arg.Private, arg.ID)
	return err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: tags.sql

package metadata

import (
	"context"
)

const deleteImageTagRelation = `-- name: DeleteImageTagRelation :exec
DELETE FROM image_tag
WHERE image_id = ? AND tag_id = ?
`

type DeleteImageTagRelationParams struct {
	ImageID string
	TagID   string
}

func (q *Queries) DeleteImageTagRelation(ctx context.Context, arg DeleteImageTagRelationParams) error {
	_, err := q.db.ExecContext(ctx, deleteImageTagRelation, arg.ImageID, arg.TagID)
	return err
}

const deleteTagByID = `-- name: DeleteTagByID :exec
DELETE FROM tags
WHERE id = ?
`

func (q *Queries) DeleteTagByID(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteTagByID, id)
	return err
}

const insertImageTagRelation = `-- name: InsertImageTagRelation :exec

INSERT INTO image_tag (image_id, tag_id)
VALUES (?, ?)
ON CONFLICT(image_id, tag_id) DO NOTHING
`

type InsertImageTagRelationParams struct {
	ImageID string
	TagID   string
}

// IMAGE_TAG (Linking Images to Tags) --
func (q *Queries) InsertImageTagRelation(ctx context.Context, arg InsertImageTagRelationParams) error {
	_, err := q.db.ExecContext(ctx, insertImageTagRelation, arg.ImageID, arg.TagID)
	return err
}

const insertTag = `-- name: InsertTag :exec

INSERT INTO tags (id, name, private)
VALUES (?, ?, ?)
`

type InsertTagParams struct {
	ID      string
	Name    string
	Private bool
}

// TAGS --
func (q *Queries) InsertTag(ctx context.Context, arg InsertTagParams) error {
	_, err := q.db.ExecContext(ctx, insertTag, arg.ID, arg.Name, arg.Private)
	return err
}

const selectAllTags = `-- name: SelectAllTags :many
SELECT id, name, private, created_at, edited_at
FROM tags
ORDER BY created_at DESC
`

func (q *Queries) SelectAllTags(ctx context.Context) ([]Tag, error) {
	rows, err := q.db.QueryContext(ctx, selectAllTags)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tag
	for rows.Next() {
		var i Tag
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Private,
			&i.CreatedAt,
			&i.EditedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectImagesByTagID = `-- name: SelectImagesByTagID :many
SELECT
    i.id,
    i.filename,
    i.mime_type_id,
    i.thumbnail,
    i.hash,
    i.created_at,
    i.edited_at
FROM images i
JOIN image_tag it ON i.id = it.image_id
WHERE it.tag_id = ?
ORDER BY i.created_at DESC
`

func (q *Queries) SelectImagesByTagID(ctx context.Context, tagID string) ([]Image, error) {
	rows, err := q.db.QueryContext(ctx, selectImagesByTagID, tagID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Image
	for rows.Next() {
		var i Image
		if err := rows.Scan(
			&i.ID,
			&i.Filename,
			&i.MimeTypeID,
			&i.Thumbnail,
			&i.Hash,
			&i.CreatedAt,
			&i.EditedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectTagByID = `-- name: SelectTagByID :one
SELECT id, name, private, created_at, edited_at
FROM tags
WHERE id = ?
`

func (q *Queries) SelectTagByID(ctx context.Context, id string) (Tag, error) {
	row := q.db.QueryRowContext(ctx, selectTagByID, id)
	var i Tag
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Private,
		&i.CreatedAt,
		&i.EditedAt,
	)
	return i, err
}

const selectTagByName = `-- name: SelectTagByName :one
SELECT id, name, private, created_at, edited_at
FROM tags
WHERE name = ?
`

func (q *Queries) SelectTagByName(ctx context.Context, name string) (Tag, error) {
	row := q.db.QueryRowContext(ctx, selectTagByName, name)
	var i Tag
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Private,
		&i.CreatedAt,
		&i.EditedAt,
	)
	return i, err
}

const selectTagsByImageID = `-- name: SelectTagsByImageID :many
SELECT
    t.id,
    t.name,
    t.private,
    t.created_at,
    t.edited_at
FROM tags t
JOIN image_tag it ON t.id = it.tag_id
WHERE it.image_id = ?
ORDER BY t.created_at DESC
`

func (q *Queries) SelectTagsByImageID(ctx context.Context, imageID string) ([]Tag, error) {
	rows, err := q.db.QueryContext(ctx, selectTagsByImageID, imageID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tag
	for rows.Next() {
		var i Tag
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Private,
			&i.CreatedAt,
			&i.EditedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTagByID = `-- name: UpdateTagByID :exec
UPDATE tags
SET name = ?,
    private = ?,
    edited_at = CURRENT_TIMESTAMP
WHERE id = ?
`

type UpdateTagByIDParams struct {
	Name    string
	Private bool
	ID      string
}

func (q *Queries) UpdateTagByID(ctx context.Context, arg UpdateTagByIDParams) error {
	_, err := q.db.ExecContext(ctx, updateTagByID, arg.Name, arg.Private, arg.ID)
	return err
}
